## ams_version=1.0

Model Main_Knapsack {
	Section Data_Model {
		Section Quantities_and_Units {
			Comment: {
				"This section contains all the units and quantities that are added automatically by AIMMS.
				It is recommended to declare all your quantities here."
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: minute->s : #-># * 60;
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI."
				}
			}
			Quantity SI_Mass {
				BaseUnit: lb;
				Conversions: {
					kg -> lb : # -> # * 2.204622476,
					oz -> lb : # -> # * 0.06249998898
				}
				Comment: "Expresses the value for the amount of matter.";
			}
			Quantity q_monetary {
				BaseUnit: $;
			}
			Quantity SI_Unitless {
				BaseUnit: -;
				Conversions: % -> - : # -> # / 100;
				Comment: "Expresses a dimensionless value.";
			}
		}
		Section Inputs {
			Section Items {
				Set s_items {
					Index: i_item;
					Parameter: ep_selectedItem;
					Definition: ElementRange(1, p_itemQuantity, prefix:"item-", fill:1);
				}
				StringParameter sp_itemDescription {
					IndexDomain: i_item;
					InitialData: "";
				}
				Parameter p_itemQuantity {
					Text: "No. of items";
					Range: integer;
					InitialData: 14;
				}
				Parameter p_itemValue {
					IndexDomain: (i_item);
					Text: "Price of the item";
					Unit: $;
					Default: 0;
				}
				Parameter p_itemWeight {
					IndexDomain: (i_item);
					Unit: lb;
					InitialData: 0;
				}
				Parameter p_maxWeightKnapsack {
					Text: "Max. weight knapsack";
					Unit: lb;
					InitialData: 60;
				}
				Parameter p_maxItemKnapsack {
					Text: "Max. item knapsack";
					InitialData: 10;
				}
				Parameter p_itemRangeMin {
					IndexDomain: (i_item);
					Range: integer;
					InitialData: 0;
				}
				Parameter p_itemRangeMax {
					IndexDomain: (i_item);
					Range: integer;
					InitialData: 0;
					webui::AnnotationsIdentifier: sp_maxRangeAnnotation;
					webui::TooltipIdentifier: sp_maxRangeTooltip;
				}
				Parameter p_itemBound {
					IndexDomain: (i_item);
					Text: "No. of copies that is allowed";
					Range: integer;
					InitialData: 0;
				}
			}
			Procedure pr_randomizeData {
				Body: {
					empty p_itemValue, p_itemWeight, p_itemBound, p_itemRangeMax;
					
					p_itemValue(i_item) := uniform(0, 200)*1[$];
					p_itemWeight(i_item) := uniform(0[lb], p_maxWeightKnapsack/3);
					p_itemBound(i_item) := ceil(uniform(0, 10));
					
					!not random
					p_itemRangeMax(i_item) := 1;
					sp_itemDescription(i_item) := i_item;
				}
			}
		}
		Section Math_Model {
			Variable v_knapsackItems {
				IndexDomain: i_item;
				Text: "Item i is placed in knapsack";
				Range: {
					{p_itemRangeMin(i_item)..p_itemRangeMax(i_item)}
				}
				webui::TooltipIdentifier: sp_tooltipPerQuantity(i_item);
			}
			Variable v_knapsackTotalValue {
				Unit: $;
				Definition: sum(i_item, v_inline_knapsackValue(i_item));
			}
			Variable v_inline_knapsackValue {
				IndexDomain: i_item;
				Text: "Total cost";
				Unit: $;
				Definition: {
					v_knapsackItems(i_item) 
					* p_itemValue(i_item)
				}
			}
			Variable v_inline_knapsackWeight {
				IndexDomain: i_item;
				Range: nonnegative;
				Unit: lb;
				Definition: v_knapsackItems(i_item) * p_itemWeight(i_item);
				webui::TooltipIdentifier: sp_tooltipPerWeight(i_item);
			}
			Constraint c_limitKnapsackWeight {
				Unit: lb;
				Definition: sum(i_item, v_inline_knapsackWeight(i_item)) <= p_maxWeightKnapsack;
			}
			Constraint c_limitKnapsackItem {
				Definition: sum(i_item, v_knapsackItems(i_item)) <= p_maxItemKnapsack;
			}
			MathematicalProgram mp_knapsackModel {
				Objective: v_knapsackTotalValue;
				Direction: maximize;
				Type: MIP;
			}
			DeclarationSection Model_Information {
				ElementParameter ep_programStatus {
					Range: AllSolutionStates;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_gap {
					Unit: %;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_numberOfConstraints {
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_numberOfVariables {
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_solutionTime {
					Unit: s;
					InitialData: 0;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
			}
			Procedure pr_solveKnapsackModel {
				Body: {
					/* Standard model allows at most 1 copy of each item */
					
					p_itemRangeMin(i_item) := 0;
					p_itemRangeMax(i_item) := 1;
					
					solve mp_knapsackModel;
					
					pr_modelInformation;
				}
			}
			Procedure pr_solveKnapsackModelUnBounded {
				Body: {
					/* Standard model allows at most a specific no of copies of each item */
					
					p_itemRangeMin(i_item) := 0;
					p_itemRangeMax(i_item) := inf;
					
					solve mp_knapsackModel;
					
					pr_modelInformation;
				}
			}
			Procedure pr_solveKnapsackModelBounded {
				Body: {
					/* Standard model allows at most a specific no of copies of each item */
					
					p_itemRangeMin(i_item) := 0;
					p_itemRangeMax(i_item) := p_itemBound(i_item);
					
					solve mp_knapsackModel;
					
					pr_modelInformation;
				}
			}
			Procedure pr_modelInformation {
				Body: {
					empty Model_Information;
					
					ep_programStatus := mp_knapsackModel.ProgramStatus;
					p_gap := abs(1 - (mp_knapsackModel.Objective/$mp_knapsackModel.BestBound));
					p_solutionTime := mp_knapsackModel.SolutionTime;
					p_numberOfConstraints := mp_knapsackModel.NumberOfConstraints;
					p_numberOfVariables := mp_knapsackModel.NumberOfVariables;
					
					p_itemFilter(i_item) := 1;
				}
			}
		}
	}
	Section UI_Declarations {
		StringParameter sp_logo {
			Definition: "aimms_logo.png";
		}
		Section Workflow {
			StringParameter sp_myWorkflows {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			}
			StringParameter sp_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					{ ( '1', '1', 'displayText'       ) : "Welcome"            ,  ( '1', '1', 'icon'              ) : "aimms-happy"        ,
					  ( '1', '1', 'pageId'            ) : "home"               ,  ( '1', '1', 'tooltip'           ) : "welcome"            ,
					  ( '1', '1', 'workflowPageState' ) : "active"             ,  ( '1', '1', 'pageDataState'     ) : "Incomplete"         ,
					  ( '1', '1', 'redirectPageId'    ) : ""               ,  ( '1', '2', 'displayText'       ) : "Story"              ,
					  ( '1', '2', 'icon'              ) : "aimms-lamp5"        ,  ( '1', '2', 'pageId'            ) : "problem_description",
					  ( '1', '2', 'tooltip'           ) : "Problem description",  ( '1', '2', 'workflowPageState' ) : "active"             ,
					  ( '1', '2', 'pageDataState'     ) : "Incomplete"         ,  ( '1', '2', 'redirectPageId'    ) : "home"               ,
					  ( '1', '3', 'displayText'       ) : "Inputs"             ,  ( '1', '3', 'icon'              ) : "aimms-equalizer2"   ,
					  ( '1', '3', 'pageId'            ) : "inputs"             ,  ( '1', '3', 'tooltip'           ) : "Input data"         ,
					  ( '1', '3', 'workflowPageState' ) : "active"             ,  ( '1', '3', 'pageDataState'     ) : "Incomplete"         ,
					  ( '1', '3', 'redirectPageId'    ) : "home"               ,  ( '1', '4', 'displayText'       ) : "Results"            ,
					  ( '1', '4', 'icon'              ) : "aimms-make-group"   ,  ( '1', '4', 'pageId'            ) : "results"            ,
					  ( '1', '4', 'tooltip'           ) : "Model outputs"      ,  ( '1', '4', 'workflowPageState' ) : if (not p_solutionTime) then "inactive" else "active" endif,
					  ( '1', '4', 'pageDataState'     ) : "Incomplete"         ,  ( '1', '4', 'redirectPageId'    ) : "home"                }
				}
			}
		}
		Section Status_Bar {
			Procedure pr_changeVisibility {
				Body: {
					if bp_dense then
					
					    sp_statusBar('1', 'header') := "Visibility";
					    sp_statusBar('1', 'icon') := "aimms-filter";
					    sp_statusBar('1', 'color') := "#505767";
					    sp_statusBar('1', 'text') := "Showing Sparse";
					    sp_statusBar('1', 'tooltip') := "Click to change visibility";
					    sp_statusBar('1', 'procedure') := "pr_changeVisibility";
					    sp_statusBar('1', 'state') := "active";
					
					    bp_sparse := 1;
					    bp_dense := 0;
					
					elseif bp_sparse then
					
					    sp_statusBar('1', 'header') := "Visibility";
					    sp_statusBar('1', 'icon') := "aimms-filter2";
					    sp_statusBar('1', 'color') := "#505767";
					    sp_statusBar('1', 'text') := "Showing Dense";
					    sp_statusBar('1', 'tooltip') := "Click to change visibility";
					    sp_statusBar('1', 'procedure') := "pr_changeVisibility";
					    sp_statusBar('1', 'state') := "active";
					
					    bp_sparse := 0;
					    bp_dense := 1;
					endif;
				}
				Comment: "Showing Dense/ Showing Sparse/ Showing Inactives";
			}
			Procedure pr_setInitialStatusBar {
				Body: {
					empty sp_statusBar;
					
					sp_statusBar('1', 'header') := "Visibility";
					sp_statusBar('1', 'icon') := "aimms-filter";
					sp_statusBar('1', 'color') := "#505767";
					sp_statusBar('1', 'text') := "Showing Sparse";
					sp_statusBar('1', 'tooltip') := "Click to change visibility";
					sp_statusBar('1', 'procedure') := "pr_changeVisibility";
					sp_statusBar('1', 'state') := "active";
					bp_sparse := 1;
				}
			}
			StringParameter sp_statusBar {
				IndexDomain: (webui::indexApplicationExtension,webui::indexStatusBarSpec);
				InitialData: {
					data 
					{ ( 1, header    ) : "Visibility"                ,  ( 1, icon      ) : "aimms-filter"              ,
					  ( 1, color     ) : "red"                       ,  ( 1, text      ) : "Showing Inactive"          ,
					  ( 1, tooltip   ) : "Click to change visibility",  ( 1, procedure ) : "pr_changeVisibility"       ,
					  ( 1, state     ) : "active"                     }
				}
			}
			Parameter bp_sparse {
				InitialData: 0;
			}
			Parameter bp_dense {
				InitialData: 0;
			}
		}
		Section Pages {
			Section Inputs_Page {
				StringParameter sp_inputsSecondaryActions {
					IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
					Definition: {
						data 
						{ ( 1, displaytext ) : "Import"                        ,  ( 1, icon        ) : "aimms-database-insert"         ,
						  ( 1, procedure   ) : "pr_readAll"                    ,  ( 1, state       ) : "active"                        ,
						  ( 2, displaytext ) : "Export"                        ,  ( 2, icon        ) : "aimms-database-export"         ,
						  ( 2, procedure   ) : "pr_writeAll"                   ,  ( 2, state       ) : "active"                        ,
						  ( 3, displaytext ) : "Generate Random"               ,  ( 3, icon        ) : "aimms-database-refresh"        ,
						  ( 3, procedure   ) : "pr_randomizeData"              ,  ( 3, state       ) : "active"                        ,
						  ( 4, displaytext ) : "Solve"                         ,  ( 4, icon        ) : "aimms-cog"                     ,
						  ( 4, procedure   ) : "pr_solveKnapsackModel"         ,  ( 4, state       ) : "active"                        ,
						  ( 5, displaytext ) : "Solve Unbounded"               ,  ( 5, icon        ) : "aimms-cog5"                    ,
						  ( 5, procedure   ) : "pr_solveKnapsackModelUnbounded",  ( 5, state       ) : "active"                        ,
						  ( 6, displaytext ) : "Solve Bounded"                 ,  ( 6, icon        ) : "aimms-cogs"                    ,
						  ( 6, procedure   ) : "pr_solveKnapsackModelBounded"  ,  ( 6, state       ) : "active"                         }
					}
				}
				StringParameter sp_maxRangeTooltip {
					Definition: "This idenfifier may change after the run.";
				}
				StringParameter sp_maxRangeAnnotation {
					Definition: "different";
				}
			}
			Section Results_Page {
				DeclarationSection Result_Side_Panel {
					Set s_def_filteredItems {
						SubsetOf: s_items;
						Index: i_fitem;
						Definition: {
							{i_item | p_itemFilter(i_item)}
						}
					}
					StringParameter sp_resultsSidePanel {
						IndexDomain: (webui::indexPageExtension,webui::indexSidePanelSpec);
						Definition: {
							data 
							{ ( 1, displayText ) : "KPIs"             ,  ( 1, pageId      ) : "informations"     ,
							  ( 1, icon        ) : "aimms-question"   ,  ( 1, state       ) : "active"           ,
							  ( 2, displayText ) : "Model Information",  ( 2, pageId      ) : "model_information",
							  ( 2, icon        ) : "aimms-info"       ,  ( 2, state       ) : "active"            }
						}
					}
					Parameter p_itemFilter {
						IndexDomain: i_item;
					}
					StringParameter sp_tooltipPerWeight {
						IndexDomain: i_item | v_inline_knapsackWeight(i_item);
						Definition: {
							formatString("%s: %i x %f lb = %f lb.",
								sp_itemDescription(i_item), 
								v_knapsackItems(i_item),
								round(p_itemWeight(i_item), 2),
								round(v_inline_knapsackWeight(i_item), 2))
						}
					}
					StringParameter sp_tooltipPerQuantity {
						IndexDomain: i_item | v_inline_knapsackWeight(i_item);
						Definition: {
							formatString("%s: %i x $%f = $%f.",
								sp_itemDescription(i_item), 
								v_knapsackItems(i_item),
								round(p_itemValue(i_item), 2),
								round(v_inline_knapsackValue(i_item), 2))
						}
					}
					Parameter p_dom_knapsackResult {
						IndexDomain: i_item;
						Definition: {
							1 $ (!used by status bar visualization
							    (v_knapsackItems(i_item)
							    and v_inline_knapsackValue(i_item)
							    and bp_dense)
							    or 
							    bp_sparse)
						}
					}
				}
			}
		}
		Section FlagsIdentifier {
			StringParameter sp_readOnlyFlag {
				Definition: "readonly";
			}
		}
	}
	Section Integration {
		StringParameter sp_wbName {
			Definition: "Knapsack Data.xlsx";
		}
		Procedure pr_readAll {
			Body: {
				if axll::WorkBookIsOpen(sp_wbName) then
				    axll::CloseWorkBook(sp_wbName);
				endif;    
				
				axll::OpenWorkBook(sp_wbName);
				
				block ! ReadTable Import
				axll::SelectSheet("Item");
				p_loc_lastRow := axll::LastUsedRowNumber;
				
				axll::ReadTable(
					IdentifierReference    :  sp_itemDescription(i_item), 
					RowHeaderRange         :  "A2:A" + p_loc_lastRow, 
					ColumnHeaderRange      :  "", 
					DataRange              :  "B2:B" + p_loc_lastRow, 
					ModeForUnknownElements :  1, 
					MergeWithExistingData  :  0);
				
				axll::ReadTable(
					IdentifierReference    :  p_itemValue(i_item), 
					RowHeaderRange         :  "A2:A" + p_loc_lastRow, 
					ColumnHeaderRange      :  "", 
					DataRange              :  "C2:C" + p_loc_lastRow, 
					ModeForUnknownElements :  1, 
					MergeWithExistingData  :  0);
				
				axll::ReadTable(
					IdentifierReference    :  p_itemWeight(i_item), 
					RowHeaderRange         :  "A2:A" + p_loc_lastRow, 
					ColumnHeaderRange      :  "", 
					DataRange              :  "D2:D" + p_loc_lastRow, 
					ModeForUnknownElements :  1, 
					MergeWithExistingData  :  0);
				
				axll::ReadTable(
					IdentifierReference    :  p_itemRangeMin(i_item), 
					RowHeaderRange         :  "A2:A" + p_loc_lastRow, 
					ColumnHeaderRange      :  "", 
					DataRange              :  "E2:E" + p_loc_lastRow, 
					ModeForUnknownElements :  1, 
					MergeWithExistingData  :  0);
				
				axll::ReadTable(
					IdentifierReference    :  p_itemRangeMax(i_item), 
					RowHeaderRange         :  "A2:A" + p_loc_lastRow, 
					ColumnHeaderRange      :  "", 
					DataRange              :  "F2:F" + p_loc_lastRow, 
					ModeForUnknownElements :  1, 
					MergeWithExistingData  :  0);				
				
				axll::ReadTable(
					IdentifierReference    :  p_itemBound(i_item), 
					RowHeaderRange         :  "A2:A" + p_loc_lastRow, 
					ColumnHeaderRange      :  "", 
					DataRange              :  "G2:G" + p_loc_lastRow, 
					ModeForUnknownElements :  1, 
					MergeWithExistingData  :  0);	
				endblock;
				
				block !	ReadSingleValue Import
				axll::SelectSheet("Knapsack");
				
				axll::ReadSingleValue(p_maxItemKnapsack, "B1");
				axll::ReadSingleValue(p_maxWeightKnapsack, "B2");
				
				endblock;
				
				axll::CloseAllWorkBooks;
			}
			Parameter p_loc_lastRow;
		}
		Procedure pr_writeAll {
			Body: {
				if axll::WorkBookIsOpen(sp_wbName) then
				    axll::CloseWorkBook(sp_wbName);
				endif;    
				
				sp_loc_itemTitle := "Items";
				sp_loc_itemValueTitle := "Value";
				sp_loc_itemWeightTitle := "Weight";
				sp_loc_itemRangeMinTitle := "Range Min.";
				sp_loc_itemRangeMaxTitle := "Range Max.";
				sp_loc_itemBoundTitle := "Bound";
				sp_loc_itemDescriptionTitle := "Description";
				sp_loc_maxItemsTitle := "Max. Items";
				sp_loc_maxWeightKnapsackTitle := "Max. Weight";
				
				s_loc_identifiers 
				:=  {'sp_itemDescription',
				    'p_itemValue', 
				    'p_itemWeight', 
				    'p_itemRangeMin', 
				    'p_itemRangeMax', 
				    'p_itemBound'};
				
				block ! WriteCompositeTable Export
				axll::CreateNewWorkBook(sp_wbName, "Item");
				
				axll::WriteCompositeTable(
					IdentifierReference :  s_loc_identifiers, 
					TopLeftCell         :  "A1", 
					WriteZeros          :  1, 
					WriteIndexNames     :  0);
				
				axll::WriteSingleValue(sp_loc_itemTitle, "A1");
				axll::WriteSingleValue(sp_loc_itemDescriptionTitle, "B1");
				axll::WriteSingleValue(sp_loc_itemValueTitle, "C1");
				axll::WriteSingleValue(sp_loc_itemWeightTitle, "D1");
				axll::WriteSingleValue(sp_loc_itemRangeMinTitle, "E1");
				axll::WriteSingleValue(sp_loc_itemRangeMaxTitle, "F1");
				axll::WriteSingleValue(sp_loc_itemBoundTitle, "G1");
				endblock;
				
				block ! WriteSingleValue Export
				axll::CreateSheet("Knapsack", "Item");
				
				axll::WriteSingleValue(sp_loc_maxItemsTitle, "A1");
				axll::WriteSingleValue(p_maxItemKnapsack, "B1");
				
				axll::WriteSingleValue(sp_loc_maxWeightKnapsackTitle, "A2");
				axll::WriteSingleValue(p_maxWeightKnapsack, "B2");
				endblock;
				
				axll::CloseAllWorkBooks;
			}
			Set s_loc_identifiers;
			StringParameter sp_loc_itemTitle;
			StringParameter sp_loc_itemValueTitle;
			StringParameter sp_loc_itemWeightTitle;
			StringParameter sp_loc_itemRangeMinTitle;
			StringParameter sp_loc_itemRangeMaxTitle;
			StringParameter sp_loc_itemBoundTitle;
			StringParameter sp_loc_itemDescriptionTitle;
			StringParameter sp_loc_maxItemsTitle;
			StringParameter sp_loc_maxWeightKnapsackTitle;
		}
		Procedure pr_dev_axllWriteExamples {
			Body: {
				if axll::WorkBookIsOpen(sp_wbName) then
				    axll::CloseWorkBook(sp_wbName);
				endif;    
				
				sp_loc_itemTitle := "Items";
				sp_loc_itemValueTitle := "Value";
				
				block ! WriteTable Export 
				axll::CreateNewWorkBook(sp_wbName, "WriteTable");
				axll::SelectSheet("WriteTable");
				
				axll::WriteTable(
					IdentifierReference     :  p_itemValue(i_item), 
					RowHeaderRange          :  "A2:A15", 
					ColumnHeaderRange       :  "",
					DataRange               :  "B2:B15");
				
				axll::WriteSingleValue(sp_loc_itemTitle, "A1");
				axll::WriteSingleValue(sp_loc_itemValueTitle, "B1");
				endblock;
				
				block ! WriteTableQuick Export
				axll::CreateSheet("WriteTableQuick", "WriteTable");
				
				axll::WriteTableQuick(
					IdentifierReference     :  p_itemValue(i_item), 
					TopLeftCell             :  "A2", 
					RowDimension            :  5, 
					WriteZeros              :  0, 
					IncludeEmptyRows        :  1, 
					IncludeEmptyColumns     :  1, 
					IncludeEmptyRowsColumns :  1);
				
				axll::WriteSingleValue(sp_loc_itemTitle, "A1");
				axll::WriteSingleValue(sp_loc_itemValueTitle, "B1");
				endblock;
				
				axll::CloseAllWorkBooks;
			}
			StringParameter sp_loc_itemTitle;
			StringParameter sp_loc_itemValueTitle;
		}
	}
	Procedure MainInitialization {
		Body: {
			pr_setInitialStatusBar;
		}
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution;
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
}
